<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>Eyes First – Double Up is a puzzle with numbered tiles, where the goal is to slide the tiles around until the number 2048 is reached. Tiles will only combine if they are the same number (2 or 4 initially, and powers of two thereafter). Try to create a tile with the number 2048. One can still continue playing after the number 2048 is reached.
This app is also designed to be played with eye control using a Windows 10 compatible eye tracker.</value>
    <comment>Main product description that appears for this game when displayed in the Windows Store.
Note: all of the other fields in this document contain text that is either displayed in the Windows Store catalog listing for this application or are meta fields used by the Windows Store search engine to help match users search terms and decide if this application is displayed in the users search results. {NumberedPlaceholder="Eyes First", "Double Up", 2048, 2, 4}</comment>
  </data>
  <data name="ProductFeatures" xml:space="preserve">
    <value>Use eye control to play Double Up</value>
    <comment>{NumberedPlaceholder="Double Up"}</comment>
  </data>
  <data name="ProductName" xml:space="preserve">
    <value>Eyes First – Double Up</value>
    <comment>{NumberedPlaceholder="Eyes First", "Double Up"}</comment>
  </data>
  <data name="SearchTerm1" xml:space="preserve">
    <value>eye control</value>
  </data>
  <data name="SearchTerm2" xml:space="preserve">
    <value>eyes first</value>
    <comment>{NumberedPlaceholder="eyes first"}</comment>
  </data>
  <data name="SearchTerm3" xml:space="preserve">
    <value>double up</value>
    <comment>{NumberedPlaceholder="double up"}</comment>
  </data>
  <data name="SearchTerm4" xml:space="preserve">
    <value>2048</value>
    <comment>{Locked}</comment>
  </data>
  <data name="SearchTerm5" xml:space="preserve">
    <value>twenty forty-eight</value>
  </data>
  <data name="SearchTerm6" xml:space="preserve">
    <value>hands free</value>
  </data>
  <data name="SearchTerm7" xml:space="preserve">
    <value>eye gaze</value>
  </data>
  <data name="ShortDescription" xml:space="preserve">
    <value>Use eye control to play Double Up and slide the number tiles to create a tile with the number 2048. Challenge yourself to reach the number 2048 and keep going thereafter to create the largest number possible!
This app is also designed to be played with eye control using a Windows 10 compatible eye tracker.</value>
    <comment>{NumberedPlaceholder="Double Up", 2048}</comment>
  </data>
  <data name="ShortTitle" xml:space="preserve">
    <value>Double Up</value>
    <comment>{NumberedPlaceholder="Double Up"}</comment>
  </data>
  <data name="SortTitle" xml:space="preserve">
    <value>Eyes First Double Up</value>
    <comment>{NumberedPlaceholder="Eyes First", "Double Up"}</comment>
  </data>
</root>